-only_company = params[:company] == 'true'
-only_regulation = params[:company] == 'false'

-content_for :modal_title do
  -object_type_name = 'control'
  -object_type_name = 'company control' if only_company
  -object_type_name = 'regulation control' if only_regulation
  -if f.object.new_record?
    Create a new #{object_type_name}
  -else
    Edit #{object_type_name}

-if !f.object.new_record?
  -content_for :modal_delete_path, delete_flow_control_path(f.object)

.row-fluid
  =wrapped_text_field f, :span4, :title, :placeholder => 'Enter title'
  -programs = Program
  -programs = programs.where(:company => true) if only_company
  -programs = programs.where(:company => false) if only_regulation
  -programs = programs.all
  -# Ensure the specified program is included?
  -#programs.unshift(f.object.program) if f.object.program && !programs.include?(f.object.program)
  =wrapped_select f, :span2, :program_id, programs.map { |p| [p.slug, p.id] }, :selected => f.object.program_id, :include_blank => true
  .span6
    .row-fluid
      =wrapped_text_field f, :span6, :slug, :label_name => 'Code (autofill)', :placeholder => 'CONTROL-XXXX'
      =wrapped_text_field f, :span6, :version, :placeholder => '1.1.1'

.row-fluid
  =wrapped_text_area f, :span6, :description, :class => 'double', :placeholder => 'Enter description here'
  .span6
    .row-fluid
      =wrapped_date_field f, :span6, :start_date, :class => 'date', :label_name => 'Effective Date', :placeholder => 'MM/DD/YYYY'
      =wrapped_date_field f, :span6, :stop_date, :class => 'date', :label_name => 'Stop Date', :placeholder => 'MM/DD/YYYY'
    .row-fluid
      -#=wrapped_select(f, :span6, :type_id, ['Regulation', 'Company'], :selected => f.object.company? ? 'Company' : 'Regulation', :)
      =wrapped_select(f, :span6, :kind_id, Option.options_for(:control_kind).map { |o| [o.title, o.id] }, :selected => (f.object.respond_to?(:kind_id) ? f.object.kind_id : nil))

.row-fluid
  =wrapped_text_field f, :span6, :url, :label_name => 'Direct Link', :placeholder => 'http://www.example.com/'
  .span6
    .row-fluid
      =wrapped_select(f, :span6, :means_id, Option.options_for(:control_means).map { |o| [o.title, o.id] }, :selected => (f.object.respond_to?(:means_id) ? f.object.means_id : nil))
      =wrapped_select(f, :span6, :verify_frequency_id, Option.options_for(:verify_frequency).map { |o| [o.title, o.id] }, :selected => (f.object.respond_to?(:verify_frequency_id) ? f.object.verify_frequency_id : nil), :label_name => 'Confirmation Frequency')

.row-fluid
  .span6{ :class => error_class(f, :documentation_description) }
    %label.subtitle
      Documentation Description
      %a.fltrt.underline
    .row-fluid
      %textarea#wysihtml5d.span12{:name => 'control[documentation_description]', :placeholder => "One-sentence explanation of the applicability of this program, used in mail merge templates.", :rows => "3", }=f.object.documentation_description
      =error_messages_inline(f, :documentation_description)

  %br
  #categorylist.span6.well{ :class => error_class(f, :categories) }
    %label{:for => 'control-categories'} Categories
    -category_list = Control.category_tree
    %select{:multiple => "multiple", :name => 'control[category_ids][]'}
      -category_list.each do |category, subcategories|
        %optgroup{ :label => category.name }
          -subcategories.each do |subcategory|
            %option{ :value => subcategory.id, :selected => (f.object.category_ids.include?(subcategory.id)) }=subcategory.name
    =error_messages_inline(f, :categories)

-#:javascript
  $('#wysihtml5').wysihtml5({ image: false }); //Button to insert an image. Default true
